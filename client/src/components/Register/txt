// import { Ed25519Signature2020 } from '@digitalbazaar/ed25519-signature-2020';
// import { issue, verify } from '@digitalbazaar/vc';
// import { createRevocationList } from '@digitalbazaar/vc-revocation-list';
// import { contexts } from '@digitalbazaar/did-context';
// import { Ed25519VerificationKey2018 } from '@digitalbazaar/ed25519-verification-key-2018';
// import { Ed25519KeyPair } from '@digitalbazaar/ed25519-key-pair';
// import { didFromKey } from '@digitalbazaar/did-io';

// class Registration extends React.Component {
//     constructor(props) {
//       super(props);
//       this.state = {
//         name: '',
//         email: '',
//         password: ''
//       };
//       this.handleNameChange = this.handleNameChange.bind(this);
//       this.handleEmailChange = this.handleEmailChange.bind(this);
//       this.handlePasswordChange = this.handlePasswordChange.bind(this);
//       this.handleSubmit = this.handleSubmit.bind(this);
//     }

//     handleNameChange(event) {
//       this.setState({name: event.target.value});
//     }

//     handleEmailChange(event) {
//       this.setState({email: event.target.value});
//     }

//     handlePasswordChange(event) {
//       this.setState({password: event.target.value});
//     }

//     async handleSubmit(event) {
//       event.preventDefault();

//       // Generate a new key pair for the user
//       const keyPair = await Ed25519KeyPair.generate();

//       // Create a DID from the public key
//       const did = await didFromKey({
//         key: keyPair.publicKey,
//         passphrase: ''
//       });

//       // Create a verifiable credential with the user's information
//       const vc = await issue({
//         credential: {
//           '@context': [
//             ...contexts,
//             'https://www.w3.org/2018/credentials/v1'
//           ],
//           type: ['VerifiableCredential'],
//           issuer: did,
//           issuanceDate: new Date().toISOString(),
//           credentialSubject: {
//             id: did,
//             name: this.state.name,
//             email: this.state.email
//           }
//         },
//         suite: new Ed25519Signature2020({ key: keyPair }),
//         documentLoader: undefined
//       });

//       // Store the key pair and VC in local storage
//       localStorage.setItem('keyPair', JSON.stringify(keyPair));
//       localStorage.setItem('vc', JSON.stringify(vc));

//       // Redirect the user to the login page
//       this.props.history.push('/login');
//     }

//     render() {
//       return (
//         <form onSubmit={this.handleSubmit}>
//           <label>
//             Name:
//             <input type="text" value={this.state.name} onChange={this.handleNameChange} />
//           </label>
//           <label>
//             Email:
//             <input type="text" value={this.state.email} onChange={this.handleEmailChange} />
//           </label>
//           <label>
//             Password:
//             <input type="password" value={this.state.password} onChange={this.handlePasswordChange} />
//           </form>

// #########################################################################################################
//############################################################################################################

// const crypto = require('crypto');

// Generate a new key pair
// const { publicKey, privateKey } = crypto.generateKeyPairSync('ed25519', {
//   // Recommended key length for ed25519 is 256 bits (32 bytes)
//   modulusLength: 256,
// });

// // Export the keys in PEM format
// const publicKeyPem = publicKey.export({
//   type: 'spki',
//   format: 'pem',
// }).toString();
// const privateKeyPem = privateKey.export({
//   type: 'pkcs8',
//   format: 'pem',
// }).toString();

// // Store the keys somewhere secure
// // For simplicity, we'll just log them to the console
// console.log('Public key:', publicKeyPem);
// console.log('Private key:', privateKeyPem);
